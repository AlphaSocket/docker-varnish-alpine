project: 
  title: &project_title alphasocket/dockerized-varnish-alpine
  codename: &project_codename varnish-alpine
  description: Varnish service on latest alpine image

#
# Build process
# Creates dockerfile and file used in it
#
build:
  envvars:
    name: *project_codename
    #cmd: 'echo -n $CONFIG_VARNISH_STARTUP_OPTIONS $CONFIG_VARNISH_STARTUP_ADDITIONAL_OPTIONS | envsubst | xargs -exec varnishd '
    cmd: "varnishd $CONFIG_VARNISH_STARTUP_OPTIONS $CONFIG_VARNISH_STARTUP_ADDITIONAL_OPTIONS"
    # Varnish
    varnish:
      conf:
        paths:
          main: /etc/varnish/default.vcl
          agent: /etc/varnish/agent/config.js
          agent_secrets: /etc/varnish/agent_secret
      host: 0.0.0.0
      port: 80
      control_panel:
        enabled:
          valueFromCommand: '[ "$BUILD_ENV" = "controlled" ] && echo "$GENERAL_KEYS_TRUE" || echo "$GENERAL_KEYS_FALSE"'
        port: 6082
      agent:
        enabled: "True"
        port: 6085
    paths:
      templates:
        folder: /usr/local/templates
    ports:
      main:
        valueFromParse: $BUILD_VARNISH_PORT
      additional:
        #valueFromCommand: '[ "$BUILD_ENV" = "controlled" ] && echo "$BUILD_VARNISH_CONTROL_PANEL_PORT" || echo ""'
        valueFromCommand: 'additional="";[ "$BUILD_VARNISH_CONTROL_PANEL_ENABLED" = "$GENERAL_KEYS_TRUE" ] && additional="$additional $BUILD_VARNISH_CONTROL_PANEL_PORT"; [ "$BUILD_VARNISH_AGENT_ENABLED" = "$GENERAL_KEYS_TRUE" ] && additional="$additional $BUILD_VARNISH_AGENT_PORT"; echo "$additional"'
  imports:
    - "templates:$BUILD_PATHS_TEMPLATES_FOLDER"

#
# Setup process injected in dockerfile
#
setup:
  # Setup env 
  envvars:
    dependencies:
      build:
      setup: alpine-sdk pkgconfig curl make automake autoconf libmicrohttpd-dev curl-dev varnish-dev py-docutils gcc git 
      runtime: varnish
  processes:
    - title: "Setup varnish-agent"
      commands:
        - latest_release=$( curl --silent "https://api.github.com/repos/varnish/vagent2/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' )
        - git clone https://github.com/varnish/vagent2 /tmp/vagent2
        - cd /tmp/vagent2
        - git checkout $latest_release
        #- wget https://github.com/varnish/vagent2/archive/$latest_release.tar.gz
        #- tar zxvf "$latest_release.tar.gz"
        #- cd "vagent2-$latest_release/" && ./autogen.sh && ./configure && make && make install
        #- cd /
        #- rm -rf /tmp/$latest_release
    

#
# Config process run just before the entrypoint
#
config:
  # Config env 
  envvars:
    groups:
      main:
        id: 1087
        name: 'varnish'
    users:
      main: 
        id: 1087
        name: 'varnish'
        groups: 'varnish'
    paths:
      templates:
        varnish:
          server:
            valueFromParse: $BUILD_PATHS_TEMPLATES_FOLDER/default.vcl
          agent:
            valueFromParse: $BUILD_PATHS_TEMPLATES_FOLDER/agent_config.js
      conf:
        varnish:
          server:
            valueFromParse: $BUILD_VARNISH_CONF_PATHS_MAIN
          agent:
            valueFromParse: $BUILD_VARNISH_CONF_PATHS_AGENT
          agent_secrets:
            valueFromParse: $BUILD_VARNISH_CONF_PATHS_AGENT_SECRETS

    varnish:
      user: varnish
      port:
        valueFromParse: $BUILD_VARNISH_PORT
      host:
        valueFromParse: $BUILD_VARNISH_HOST
      memory: 256m
      working:
        dir: /var/lib/varnish/$(hostname)
      backend: 
        address: webserver.cluster 
        port: 80
        retries: 5
      control_panel:
        enabled:
          valueFromParse: $BUILD_VARNISH_CONTROL_PANEL_ENABLED
        startup:
          options: "'-T ${BUILD_VARNISH_HOST}:${BUILD_VARNISH_CONTROL_PANEL_PORT} -b ${CONFIG_VARNISH_BACKEND_ADDRESS}:${CONFIG_VARNISH_BACKEND_PORT} -p cli_buffer=16384 -p feature=+esi_ignore_other_elements -p vcc_allow_inline_c=on '"
      agent:
        user: varnish_agent_user
        pass: varnish_agent_pass
      startup:
        options: "'-F -s malloc,${CONFIG_VARNISH_MEMORY} -a ${BUILD_VARNISH_HOST}:${BUILD_VARNISH_PORT} -j unix,user=${CONFIG_USERS_MAIN_NAME},ccgroup=${CONFIG_GROUPS_MAIN_NAME} '"
        additional:
          options:
            valueFromCommand: '[ "$BUILD_ENV" = "controlled" ] && echo "$CONFIG_VARNISH_CONTROL_PANEL_STARTUP_OPTIONS" || echo "-f $CONFIG_PATHS_CONF_VARNISH_SERVER"'
      
  processes:
    - title: "Setup folder"
      commands:
        - mkdir -p $CONFIG_VARNISH_WORKING_DIR && chown -R ${CONFIG_USERS_MAIN_NAME}:${CONFIG_GROUPS_MAIN_NAME} $CONFIG_VARNISH_WORKING_DIR

    - title: "Create server conf"
      shell_condition: '"$BUILD_ENV" != "controlled"'
      commands:
       - mkdir -p $(dirname "$CONFIG_PATHS_CONF_VARNISH_SERVER")
       - envsubst < "$CONFIG_PATHS_TEMPLATES_VARNISH_SERVER" > "$CONFIG_PATHS_CONF_VARNISH_SERVER"
       
    - title: "Create varnish agent config"
      shell_condition: '"$BUILD_VARNISH_AGENT_ENABLED" = "$GENERAL_KEYS_TRUE"'
      commands:
        - envsubst < "$CONFIG_PATHS_TEMPLATES_VARNISH_AGENT" > "$CONFIG_PATHS_CONF_VARNISH_AGENT"
        - echo "$CONFIG_VARNISH_AGENT_USER:$CONFIG_VARNISH_AGENT_PASS" >> "$CONFIG_PATHS_CONF_VARNISH_AGENT_SECRETS"
        - chmod 700 "$CONFIG_PATHS_CONF_VARNISH_AGENT_SECRETS"
        
    - title: "Fix conf ownership"
      commands:
        - chown -R ${CONFIG_USERS_MAIN_NAME}:${CONFIG_GROUPS_MAIN_NAME} "/etc/varnish"
       
test:
  processes:
    #
    # Starting
    #
    - title: "Starting varnish container"
      commands:
        - TEST_CONTAINER_VARNISH_ID=$(
            docker run 
              -d --name=$TEST_CONTAINER_NAME
              -p 127.0.0.1:${TEST_HOST_PORT}:${BUILD_PORTS_MAIN}
              -e CONFIG_VARNISH_BACKEND_ADDRESS=127.0.0.1
              -e CONFIG_VARNISH_BACKEND_PORT=8080
              ${BUILD_USER}/${BUILD_NAME}:${BUILD_VERSION}
          )
        - TEST_CONTAINER_VARNISH_STATUS=$(sleep 1 && docker inspect -f '{{.State.Running}}' $TEST_CONTAINER_VARNISH_ID)

    - title: "Testing varnish container"
      shell_condition: '! "$TEST_CONTAINER_VARNISH_STATUS" = "true"'
      commands:
        - echo "### Varnish container failed, print logs and exiting\n"
        - docker logs $TEST_CONTAINER_VARNISH_ID
        - exit 1
      else:
        - echo "### Varnish container is running\n" 

    # 
    # Run nginx
    # 
    - title: "Starting nginx container"
      commands: 
        - TEST_CONTAINER_NGINX_ID=$(
            docker run 
              -d --net=container:$TEST_CONTAINER_NAME 
              03192859189254/dockerized-nginx-tester:latest
          )
        - TEST_CONTAINER_NGINX_STATUS=$(sleep 1 && docker inspect -f '{{.State.Running}}' $TEST_CONTAINER_NGINX_ID)

    - title: "Testing nginx container"
      shell_condition: '! "$TEST_CONTAINER_NGINX_STATUS" = "true"'
      commands:
        - echo "### Httpd container failed, print logs and exiting\n"
        - docker logs $TEST_CONTAINER_NGINX_ID
        - exit 1
      else:
        - echo "### Httpd container is running\n" 

    #
    # TESTING
    #
    - title: "Testing varnish service"
      commands:
        - sleep 3
        - HTTP_CODE=$( curl -sLI 127.0.0.1:${TEST_HOST_PORT}/index.html -o /dev/null -w '%{http_code}\n' )
        - HTTP_HEADERS=$( curl -sLI 127.0.0.1:${TEST_HOST_PORT}/index.html )
        - VARNISH_TEST=$(echo "$HTTP_HEADERS" | grep -q "X-Varnish" && echo "Success")

    - title: "Checking exit code"
      shell_condition: '! "$HTTP_CODE" = "200"'
      commands:
        - echo "### Test failed, received HTTP code ${HTTP_CODE} printing log\n" 
        - docker logs $TEST_CONTAINER_VARNISH_ID
        - exit 1
      else:
        - echo "### Received HTTP code ${HTTP_CODE}\n" 
        
    - title: "Checking varnish headers"
      shell_condition: '"$VARNISH_TEST" = "Success"'
      commands:
        - echo "### Test Succeeded\n Varnish placed in front, Responce headers received are:\n ${HTTP_HEADERS}\n" 
      else:
        - echo "### Test failed, varnish headers not found during HTTP request. Printing log\n" 
        - docker logs $TEST_CONTAINER_VARNISH_ID
        - exit 1

cache:
  docker_images:
    - $BUILD_FROM
    - 03192859189254/dockerized-nginx-tester:latest
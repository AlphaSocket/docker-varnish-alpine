project: 
  title: &project_title alphasocket/dockerized-varnish-alpine
  codename: &project_codename varnish-alpine
  description: Varnish service on latest alpine image

#
# Init builder
#
general:
  envvars:
    docker:
      user: &general_docker_user 03192859189254 
    keys:
      True: "True"
      false: "False"
      dev: "dev"
      prd: "prd"
    
#
# Build process
# Creates dockerfile and file used in it
#
build:
  envvars:
    name: *project_codename
    branch:
      valueFromCommand: 'git rev-parse --abbrev-ref HEAD'
    commit:
      valueFromCommand: 'git rev-parse --short HEAD'
    version:
      valueFromCommand: 'echo $BUILD_BRANCH | cut -d \- -f 1'
    env:
      valueFromCommand: 'env=$(echo $BUILD_BRANCH | cut -d \- -f 2); [ "$env" = "$BUILD_VERSION" ] && echo $GENERAL_KEYS_PRD || echo $env'
    # Varnish
    varnish:
      conf:
        path: /etc/varnish/default.vcl
      port: 80
    # Docker
    dockerfile:
      image: alpine:latest
      ports:
        main: $BUILD_VARNISH_PORT
      cmd: varnishd -Ff $BUILD_VARNISH_CONF_PATH
      #cmd: varnishd -f /etc/varnish/default.vcl
  import:
    - "templates:/usr/local/templates"

#
# Setup process injected in dockerfile
#
setup:
  # Setup env 
  envvars:
    dependencies:
      setup: varnish
      config: gettext
  # Setup Processes
  processes:
    - title: "Install dependencies"
      commands: 
        - "apk add --no-cache $SETUP_DEPENDENCIES_CONFIG $SETUP_DEPENDENCIES_SETUP"

#
# Config process run just before the entrypoint
#
config:
  # Config env 
  envvars:
    varnish:
      user: varnish
      port: $BUILD_VARNISH_PORT
      memory: 1M
      working:
        dir: /var/lib/varnish/$(hostname)
      backend: 
        address: webserver.cluster 
        port: 80
        retries: 5
    paths:
      templates:
        varnish:
          server: /usr/local/templates/default.vcl
      conf:
        varnish:
          server: $BUILD_VARNISH_CONF_PATH
      
  processes:
    - title: "Setup folder"
      commands:
        - mkdir -p $CONFIG_VARNISH_WORKING_DIR && chown $CONFIG_VARNISH_USER $CONFIG_VARNISH_WORKING_DIR

    - title: "Create server conf"
      commands:
       #- cp $CONFIG_PATHS_TEMPLATES_VARNISH_SERVER $CONFIG_PATHS_CONF_VARNISH_SERVER
       - envsubst < $CONFIG_PATHS_TEMPLATES_VARNISH_SERVER > $CONFIG_PATHS_CONF_VARNISH_SERVER

test:
  envvars:
    name: $BUILD_NAME
    port: 30080
    dockerfile:
      tag: 
        user: *general_docker_user
        name: $BUILD_NAME
        version: $BUILD_BRANCH

  processes:
    #
    # Starting
    #
    - title: "Starting varnish container"
      commands:
        - TEST_CONTAINER_VARNISH_ID=$(
            docker run 
              -d --name=$TEST_NAME
              -p 127.0.0.1:${TEST_PORT}:${BUILD_DOCKERFILE_PORTS_MAIN}
              -e CONFIG_VARNISH_BACKEND_ADDRESS=127.0.0.1
              -e CONFIG_VARNISH_BACKEND_PORT=8080
              ${TEST_DOCKERFILE_TAG_USER}/${TEST_DOCKERFILE_TAG_NAME}:${TEST_DOCKERFILE_TAG_VERSION}
          )
        - TEST_CONTAINER_VARNISH_STATUS=$(sleep 1 && docker inspect -f '{{.State.Running}}' $TEST_CONTAINER_VARNISH_ID)

    - title: "Testing varnish container"
      shell_condition: '! "$TEST_CONTAINER_VARNISH_STATUS" = "true"'
      commands:
        - echo "Varnish container failed, print logs and exiting\n"
        - docker logs $TEST_CONTAINER_VARNISH_ID
        - exit 1

    # 
    # Run nginx
    # 
    - title: "Starting nginx container"
      commands: 
        - TEST_CONTAINER_NGINX_ID=$(
            docker run 
              -d --net=container:$TEST_NAME 
              03192859189254/dockerized-nginx-tester:latest
          )
        - TEST_CONTAINER_NGINX_STATUS=$(sleep 1 && docker inspect -f '{{.State.Running}}' $TEST_CONTAINER_NGINX_ID)

    - title: "Testing nginx container"
      shell_condition: '! "$TEST_CONTAINER_NGINX_STATUS" = "true"'
      commands:
        - echo "Httpd container failed, print logs and exiting\n"
        - docker logs $TEST_CONTAINER_NGINX_ID
        - exit 1

    #
    # TESTING
    #
    - title: "Testing varnish service"
      commands:
        - HTTP_CODE=$( sleep 1 && curl -sLI 127.0.0.1:${TEST_PORT}/index.html -o /dev/null -w '%{http_code}\n' )
        - HTTP_HEADERS=$( sleep 1 && curl -sLI 127.0.0.1:${TEST_PORT}/index.html )

    - title: "Checking exit code"
      shell_condition: '! "$HTTP_CODE" = "200"'
      commands:
        - echo "### Test failed, received HTTP code ${HTTP_CODE} printing log\n" 
        - docker logs $TEST_CONTAINER_VARNISH_ID
        - exit 1

    - title: "Checking varnish headers"
      shell_condition: 'echo "$HTTP_HEADERS" | grep -q "X-Varnish"'
      commands:
        - echo "### Test failed, varnish headers not found during HTTP request. Printing log\n" 
        - docker logs $TEST_CONTAINER_VARNISH_ID
        - exit 1

    - title: "Success"
      commands:
        - echo "### Test Succeeded, received HTTP code ${HTTP_CODE} printing log\n" 
